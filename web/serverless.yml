
service: web 
frameworkVersion: ">=1.14.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  profile: tab-sls
  stage: ${env:SLS_STAGE, self:custom.stageDefault}

plugins:
  # TODO: potentially remove if not needed?
  - serverless-single-page-app-plugin

custom:
  stageDefault: dev
  s3Bucket: ${env:WEB_S3_BUCKET_NAME}
  webAppName: Tab2017
  cloudfrontDomainAlias: ${env:CLOUDFRONT_DOMAIN_ALIAS}
  SSLCertificateARN: ${env:SSL_CERTIFICATE_ARN}

resources:
  Resources:

    TabS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    TabS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: TabS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    # Serve the app through Cloudfront.
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distributionconfig.html
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              # An identifier for the origin. This must be unique within the distribution.
              Id: ${self:custom.webAppName}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                # HTTP only is required for S3 buckets that are configured as
                # website endpoints:
                # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginProtocolPolicy 
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultRootObject: index.html
          Aliases:
            - ${self:custom.cloudfrontDomainAlias}
          # Always return the single page app and let it handle routing.
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          # How CloudFront determines cache behavior:
          #   https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html#ExpirationDownloadDist
          # CloudFront guide to CacheBehavior:
          #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachebehavior.html
          # Note that this is primarily specifying how Cloudfront edges should
          # cache files. For browser caching, we must still set Cache-Control headers
          # on the origin server (S3).
          CacheBehaviors:
            # Do not cache HTML for a long time.
            - PathPattern: '*.html'
              # Maybe consider short HTML caching (say, 10 mins) for small
              # page speed gains.
              MinTTL: 0
              MaxTTL: 0
              AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: ${self:custom.webAppName}
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html
              Compress: false # TODO: enable
              # Switch this to "redirect-to-https" after migrating to HTTPS only.
              ViewerProtocolPolicy: allow-all
            # Cache (non-HTML) static files for a long time.
            - PathPattern: '*'
              MinTTL: 31536000 # one year
              MaxTTL: 63072000 # two years
              AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: ${self:custom.webAppName}
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              Compress: false # TODO: enable
              # Switch this to "redirect-to-https" after migrating to HTTPS only.
              ViewerProtocolPolicy: allow-all
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            TargetOriginId: ${self:custom.webAppName}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            # The protocol that users can use to access the files in the origin.
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-defaultcachebehavior.html#cfn-cloudfront-defaultcachebehavior-viewerprotocolpolicy
            ViewerProtocolPolicy: allow-all
          # The certificate to use when viewers use HTTPS to request objects.
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distributionconfig-viewercertificate.html
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.SSLCertificateARN}
            SslSupportMethod: sni-only
  
  # In order to print out the hosted domain via `serverless info`,
  # we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value: ${self:custom.s3Bucket}.s3.amazonaws.com
