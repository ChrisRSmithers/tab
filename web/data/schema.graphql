input AddBookmarkInput {
  userId: String!
  widgetId: String!
  name: String!
  link: String!
  clientMutationId: String
}

type AddBookmarkPayload {
  widget: Widget
  clientMutationId: String
}

# Global app fields
type App implements Node {
  # The ID of an object
  id: ID!

  # All the charities
  charities(after: String, first: Int, before: String, last: Int): CharityConnection

  # All the background Images
  backgroundImages(after: String, first: Int, before: String, last: Int): BackgroundImageConnection
}

# A background image
type BackgroundImage implements Node {
  # The ID of an object
  id: ID!

  # the background image name
  name: String

  # The image file name
  fileName: String
  url: String
}

# A connection to a list of items.
type BackgroundImageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BackgroundImageEdge]
}

# An edge in a connection.
type BackgroundImageEdge {
  # The item at the end of the edge
  node: BackgroundImage

  # A cursor for use in pagination
  cursor: String!
}

# A charitable charity
type Charity implements Node {
  # The ID of an object
  id: ID!

  # the charity name
  name: String

  # the charity category
  category: String
}

# A connection to a list of items.
type CharityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CharityEdge]
}

# An edge in a connection.
type CharityEdge {
  # The item at the end of the edge
  node: Charity

  # A cursor for use in pagination
  cursor: String!
}

input DonateVcInput {
  userId: String!
  charityId: String!
  vc: Int!
  clientMutationId: String
}

type DonateVcPayload {
  user: User
  clientMutationId: String
}

# An image object
type Image {
  # The image id
  id: String

  # The image name
  name: String

  # The image file name
  fileName: String
  url: String
}

type Mutation {
  updateVc(input: UpdateVcInput!): UpdateVcPayload
  donateVc(input: DonateVcInput!): DonateVcPayload
  setUserBkgImage(input: SetUserBkgImageInput!): SetUserBkgImagePayload
  updateWidgetData(input: UpdateWidgetDataInput!): UpdateWidgetDataPayload
  updateWidgetVisibility(input: UpdateWidgetVisibilityInput!): UpdateWidgetVisibilityPayload
  addBookmark(input: AddBookmarkInput!): AddBookmarkPayload
  removeBookmark(input: RemoveBookmarkInput!): RemoveBookmarkPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  app: App
  user(userId: String!): User
}

input RemoveBookmarkInput {
  userId: String!
  widgetId: String!
  position: Int!
  clientMutationId: String
}

type RemoveBookmarkPayload {
  widget: Widget
  clientMutationId: String
}

input SetUserBkgImageInput {
  userId: String!
  imageId: String!
  clientMutationId: String
}

type SetUserBkgImagePayload {
  user: User
  clientMutationId: String
}

input UpdateVcInput {
  userId: String!
  clientMutationId: String
}

type UpdateVcPayload {
  user: User
  clientMutationId: String
}

input UpdateWidgetDataInput {
  userId: String!
  widgetId: String!
  data: String!
  clientMutationId: String
}

type UpdateWidgetDataPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetVisibilityInput {
  userId: String!
  widgetId: String!
  visible: Boolean!
  clientMutationId: String
}

type UpdateWidgetVisibilityPayload {
  widget: Widget
  clientMutationId: String
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # Users's background image
  backgroundImage: Image

  # Users's username
  username: String

  # User's email
  email: String

  # User's current vc
  vcCurrent: Int

  # User's vc of all time
  vcAllTime: Int

  # User's vc
  level: Int

  # Remaing hearts until next level.
  heartsUntilNextLevel: Int

  # User widgets
  widgets(after: String, first: Int, before: String, last: Int): WidgetConnection
}

# App widget
type Widget implements Node {
  # The ID of an object
  id: ID!

  # Widget display name
  name: String

  # Widget type
  type: String

  # Widget icon
  icon: String

  # The Widget enabled state
  enabled: Boolean

  # The Widget visible state
  visible: Boolean

  # Widget data.
  data: String

  # Widget user specific configuration.
  config: String

  # Widget general configuration.
  settings: String
}

# A connection to a list of items.
type WidgetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [WidgetEdge]
}

# An edge in a connection.
type WidgetEdge {
  # The item at the end of the edge
  node: Widget

  # A cursor for use in pagination
  cursor: String!
}
