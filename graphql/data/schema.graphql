# A charitable charity
type Charity implements Node {
  # The ID of an object
  id: ID!

  # the charity name
  name: String
}

# A connection to a list of items.
type CharityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CharityEdge]
}

# An edge in a connection.
type CharityEdge {
  # The item at the end of the edge
  node: Charity

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # A person's collection of widgets
  widgets(after: String, first: Int, before: String, last: Int): WidgetConnection

  # The charities in the app
  charities(after: String, first: Int, before: String, last: Int): CharityConnection
}

# A shiny widget
type Widget implements Node {
  # The ID of an object
  id: ID!

  # The name of the widget
  name: String
}

# A connection to a list of items.
type WidgetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [WidgetEdge]
}

# An edge in a connection.
type WidgetEdge {
  # The item at the end of the edge
  node: Widget

  # A cursor for use in pagination
  cursor: String!
}
