
service:
  name: lambda
  awsKmsKeyArn: ${self:custom.awsKmsKeyArn} 
frameworkVersion: ">=1.12.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  stage: ${env:SLS_STAGE, self:custom.stageDefault}
  iamRoleStatements:
    ## TODO: more precise permissions when needed
    # - Effect: "Allow"
    #   Action:
    #     - "dynamodb:BatchGetItem"
    #     - "dynamodb:BatchWriteItem"
    #     - "dynamodb:DeleteItem"
    #     - "dynamodb:DescribeReservedCapacity"
    #     - "dynamodb:DescribeReservedCapacityOfferings"
    #     - "dynamodb:DescribeTable"
    #     - "dynamodb:DescribeTimeToLive"
    #     - "dynamodb:GetItem"
    #     - "dynamodb:ListTables"
    #     - "dynamodb:ListTagsOfResource"
    #     - "dynamodb:PutItem"
    #     - "dynamodb:Query"
    #     - "dynamodb:Scan"
    #     - "dynamodb:UpdateItem"
    #   Resource: "*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: ${self:custom.awsKmsKeyArn} 
    # TODO: we may need role permissions for Lambda@Edge

custom:
  stageDefault: dev
  # TODO: make KMS key an env var
  awsKmsKeyArn: arn:aws:kms:us-west-2:167811431063:key/de8bda45-b6cd-421f-8f56-de56bfb9f97b

plugins:
  # Include only the required node modules.
  # https://github.com/dougmoscrop/serverless-plugin-include-dependencies
  - serverless-plugin-include-dependencies
  # Associate the latest Lambda@Edge functions with their CloudFront
  # distribution.
  # https://github.com/serverless/serverless/issues/3944
  # https://github.com/silvermine/serverless-plugin-cloudfront-lambda-edge
  - @silvermine/serverless-plugin-cloudfront-lambda-edge

# Only include the build and its node modules.
package:
  exclude:
    - ./**
  include:
    - build/**

functions:
  firebaseAuthorizer:
    handler: build/firebase-authorizer/firebase-authorizer.serverlessHandler
    environment:
      LAMBDA_FIREBASE_PROJECT_ID: ${env:LAMBDA_FIREBASE_PROJECT_ID}
      LAMBDA_FIREBASE_DATABASE_URL: ${env:LAMBDA_FIREBASE_DATABASE_URL}
      LAMBDA_FIREBASE_CLIENT_EMAIL: ${env:LAMBDA_FIREBASE_CLIENT_EMAIL}
      # Encrypted with AWS KMS for encryption during deploy.
      #   https://docs.aws.amazon.com/lambda/latest/dg/env_variables.html
      #   https://docs.aws.amazon.com/cli/latest/reference/kms/encrypt.html
      # Unfortunately, "Cloudformation and SAM do not currently support encryption helpers that
      #   Lambda console provides...  As of now the only way to achieve this (other than through console)
      #   is to use client side encryption - use encrypted cipher text in your variables and then decrypt
      #   them in the lambda function code."
      #   https://github.com/awslabs/serverless-application-model/issues/48#issuecomment-269663554
      # Note on encrypting/decrypting with the AWS CLI:
      #   https://github.com/aws/aws-cli/issues/1043#issuecomment-65878875
      # To encrypt:
      #   `aws kms encrypt --key-id [kms-key-id] --plaintext [item]`
      LAMBDA_FIREBASE_PRIVATE_KEY: ${file(./src/firebase-authorizer/variables.yml):${self:provider.stage}.LAMBDA_FIREBASE_PRIVATE_KEY}
  newtabAppLambdaEdge:
    handler: build/newtab-app-lambda-edge/newtab-app-lambda-edge
    # This adds this Lambda@Edge function to a cache behavior on our
    # CloudFront distribution (as a LambdaFunctionAssociation).
    # When CloudFront calls our origin, this function rewrites all
    # HTML requests to the root index.html to serve the single-page
    # app. We don't want to rely on setting S3's error document to the
    # index.html file, because then S3 will return a 404 to Cloudfront,
    # which will call the 404 error document; CloudFront only allows
    # one custom 404 error document, which means this wouldn't work
    # for two single-page apps on the same CF distribution.
    lambdaAtEdge:
       distribution: 'WebAppCloudFrontDistribution'
        # "Executes on a cache miss, before a request is forwarded to
        # the origin"
        # https://aws.amazon.com/blogs/networking-and-content-delivery/lambdaedge-design-best-practices/
       eventType: 'origin-request'
       # This must match a path pattern in a cache behavior.
       pathPattern: 'newtab*'
  searchAppLambdaEdge:
    handler: build/search-app-lambda-edge/search-app-lambda-edge
    lambdaAtEdge:
       distribution: 'WebAppCloudFrontDistribution'
       eventType: 'origin-request'
       pathPattern: 'search*'

    
